<?php
namespace Wiakowe\Tests\CsvReader\File;

use Wiakowe\CsvReader\File\CsvFile;
use org\bovigo\vfs\vfsStream;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2012-06-18 at 11:20:59.
 */
class CsvFileTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var CsvFile
     */
    protected $object;
    protected $filePath;
    protected $csvFile;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $dir = vfsStream::setup('root');
        $this->csvFile = vfsStream::newFile('file.csv');

        $dir->addChild($this->csvFile);

        $this->csvFile->setContent(
<<<CSVCONTENT
"header1", "header2"
"row1",1
"row2",2
"row3",3
CSVCONTENT
        );
        $this->filePath = vfsStream::url('root/file.csv');

        $this->object = new CsvFile($this->filePath);
    }

    /**
     * @covers Wiakowe\CsvReader\File\CsvFile::__construct
     */
    public function testConstruct()
    {
        // Verify that the construct works as expected with it's allowed
        // parameters.
        new CsvFile($this->filePath, true, ',', '"', '\\');

        new CsvFile(fopen($this->filePath, 'r'));
    }

    /**
     * @covers Wiakowe\CsvReader\File\CsvFile::hasHeader
     */
    public function testHasHeader()
    {
        $this->assertTrue($this->object->hasHeader(),
            'By default the object is believed to have a header.');

        $csvFile = new CsvFile($this->filePath, false);

        $this->assertFalse($csvFile->hasHeader(),
            'Has header has to be false if it\'s value is overridden.');
    }

    /**
     * @covers Wiakowe\CsvReader\File\CsvFile::getHeader
     */
    public function testGetHeader()
    {
        $header = $this->object->getHeader();

        $this->assertInstanceOf('\Wiakowe\CsvReader\Header\CsvHeader', $header);

        $this->assertEquals(2, $header->getNumHeaders());

        $this->assertTrue(
            $header->getHeaderCellByName('header1') &&
                $header->getHeaderCellByName('header2'),
            'Headers must be found for header1 and header2.');
    }

    /**
     * @covers Wiakowe\CsvReader\File\CsvFile::totalRows
     */
    public function testTotalRows()
    {
        $this->assertEquals(3, $this->object->totalRows());
    }

    /**
     * @covers Wiakowe\CsvReader\File\CsvFile::totalColumns
     */
    public function testTotalColumns()
    {
        $this->assertEquals(2, $this->object->totalColumns());
    }

    /**
     * @covers Wiakowe\CsvReader\File\CsvFile::getRow
     */
    public function testGetRow()
    {
        $row = $this->object->getRow(1);

        $this->assertInstanceOf('\Wiakowe\CsvReader\Row\CsvRow', $row);

        $this->assertEquals(1, $row->getRowPosition());
    }

    /**
     * @covers Wiakowe\CsvReader\File\CsvFile::getRow
     * @expectedException \Wiakowe\CsvReader\Exception\RowNotFoundException
     */
    public function testGetRowThrowsRowNotFoundException()
    {
        $this->object->getRow(5);
    }

    /**
     * @covers Wiakowe\CsvReader\File\CsvFile::getColumn
     */
    public function testGetColumnByPosition()
    {
        $column = $this->object->getColumn(1);

        $this->assertInstanceOf('\Wiakowe\CsvReader\Column\CsvColumn', $column);

        $this->assertEquals(1, $column->getColumnPosition());
    }

    /**
     * @covers Wiakowe\CsvReader\File\CsvFile::getColumn
     */
    public function testGetColumnByHeaderCell()
    {
        $header1 = $this->object->getHeader()->getHeaderCellByName('header1');

        $column = $this->object->getColumn($header1);

        $this->assertInstanceOf('\Wiakowe\CsvReader\Column\CsvColumn', $column);

        $this->assertSame($header1, $column->getHeaderCell());
    }

    /**
     * @covers Wiakowe\CsvReader\File\CsvFile::getColumn
     * @expectedException \Wiakowe\CsvReader\Exception\ColumnNotFoundException
     */
    public function testGetColumnThrowsColumnNotFoundByPosition()
    {
        $this->object->getColumn(6);
    }

    /**
     * @covers Wiakowe\CsvReader\File\CsvFile::getColumn
     * @expectedException \Wiakowe\CsvReader\Exception\ColumnNotFoundException
     */
    public function testGetColumnThrowsColumnNotFoundByHeaderCell()
    {
        $header = \Mockery::mock('\Wiakowe\CsvReader\Header\CsvHeaderCell');

        $this->object->getColumn($header);
    }

    /**
     * @covers Wiakowe\CsvReader\File\CsvFile::getCell
     */
    public function testGetCell()
    {
        $cell = $this->object->getCell(1, 1);

        $this->assertInstanceOf('\Wiakowe\CsvReader\Cell\CsvCell', $cell);

        $this->assertEquals('row1', $cell->getContent(),
            'The content of the cell should be the one previously set.');

        $header1 = $this->object->getHeader()->getHeaderCellByName('header1');

        $cell2 = $this->object->getCell(1, $header1);

        $this->assertSame($cell, $cell2, 'Both cells should be the same one.');
    }


    /**
     * @covers Wiakowe\CsvReader\File\CsvFile::getCell
     * @expectedException \Wiakowe\CsvReader\Exception\CellNotFoundException
     */
    public function testGetCellThrowsCellNotFoundException1()
    {
        $this->object->getCell(5, 1);
    }

    /**
     * @covers Wiakowe\CsvReader\File\CsvFile::getCell
     * @expectedException \Wiakowe\CsvReader\Exception\CellNotFoundException
     */
    public function testGetCellThrowsCellNotFoundException2()
    {
        $this->object->getCell(2, 6);
    }

    /**
     * @covers Wiakowe\CsvReader\File\CsvFile::getRowIterator
     */
    public function testGetRowIterator()
    {
        $iterator = $this->object->getRowIterator();

        $this->assertTrue(is_array($iterator)
            || $iterator instanceof \Traversable,
            'To be traversable, it must be an array or an instance of ' .
                ' \\Traversable');
    }
}
